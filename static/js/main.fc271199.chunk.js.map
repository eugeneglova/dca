{"version":3,"sources":["functions.js","TableEdit.js","App.js","index.js"],"names":["getDecimals","value","absValue","Math","abs","precision","decimals","floor","getCost","p","a","getPositionPL","entryPrice","exitPrice","amount","fee","pl","exitFee","getPositionPLPercent","cost","positiveAmount","max","getPositionCost","getPosition","pp","pa","op","oa","getPosPrice","plp","id","_","uniqueId","price","getPercentPrice","percent","parseFloat","getNextPrice","xPrice","sign","index","log10","getNextAmount","xAmount","getAvgPosition","orders","maxIndex","length","reduce","acc","order","isEmpty","getOrderRows","entryAmount","pricePercent","rows","endPrice","push","getRowId","row","FocusableCell","onClick","restProps","Cell","tabIndex","onFocus","TableEdit","initRows","columns","onChange","useState","setRows","editingCells","setEditingCells","useEffect","commitChanges","changedRows","added","changed","deleted","startingAddedId","map","deletedSet","Set","filter","has","onCommitChanges","onEditingCellsChange","addedRows","onAddedRowsChange","cellComponent","selectTextOnEditStart","showAddCommand","showDeleteCommand","App","symbol","xPositionAmount","leverage","aff_code","log","settings","setSettings","orderRows","setOrderRows","pos","getPlRows","plRows","setPlRows","settingsColumns","name","title","getCellValue","data","JSON","parse","prompt","positions","position","status","basePrice","exitPirce","positionRows","pair","newOrderRows","all","slice","type","concat","flags","String","meta","lev","undefined","stringify","isPublic","throttle","payload","join","getOrders","console","copy","indexOf","prevPrice","diff","diffPercent","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc271199.chunk.js","sourcesContent":["import _ from 'lodash'\n\nconst getDecimals = (value) => {\n  const absValue = Math.abs(value)\n  if (absValue < 0.0005) return 6\n  if (absValue < 0.005) return 5\n  if (absValue < 0.05) return 4\n  if (absValue < 0.5) return 3\n  if (absValue < 1) return 2\n  if (absValue < 1000) return 2\n  if (absValue < 10000) return 1\n  return 0\n}\n\nexport const precision = (value, decimals = getDecimals(value)) =>\n  Math.floor(value * 10 ** decimals) / 10 ** decimals\n\nconst getCost = (p, a) => precision(p * a)\nconst getPosPrice = (pp, pa, op, oa) => precision((getCost(pp, pa) + getCost(op, oa)) / (pa + oa))\n\nexport const getPositionPL = (entryPrice, exitPrice, amount, fee) => {\n  const pl = (exitPrice - entryPrice) * amount\n  const exitFee = exitPrice * Math.abs(amount) * fee\n  return precision(pl - exitFee)\n}\n\nconst getPositionCost = (entryPrice, exitPrice, amount) => {\n  const positiveAmount = Math.abs(amount)\n  if (amount < 0) {\n    return Math.max(positiveAmount * entryPrice, positiveAmount * exitPrice, 0)\n  }\n  return Math.max(positiveAmount * entryPrice, 0)\n}\n\nexport const getPositionPLPercent = (entryPrice, exitPrice, amount) => {\n  const pl = getPositionPL(entryPrice, exitPrice, amount, 0)\n  const cost = getPositionCost(entryPrice, exitPrice, amount)\n  return pl && cost !== 0 ? (pl / cost) * 100 : 0\n}\n\nexport const getPosition = (pp, pa, op, oa) => {\n  const p = getPosPrice(pp, pa, op, oa)\n  const a = precision(pa + oa)\n  const pl = getPositionPL(p, op, a, 0.002)\n  const plp = precision(getPositionPLPercent(p, op, a))\n  return {\n    id: _.uniqueId(),\n    price: p,\n    amount: a,\n    op,\n    oa,\n    pl,\n    plp,\n  }\n}\n\nexport const getPercentPrice = (entryPrice, percent) =>\n  precision(parseFloat(entryPrice) + parseFloat(entryPrice) * (parseFloat(percent) / 100))\nexport const getPricePercent = (price, entryPrice) =>\n  precision(((parseFloat(price) - parseFloat(entryPrice)) * 100) / parseFloat(entryPrice))\n\nconst getNextPrice = (price, xPrice, sign, index) => {\n  return precision(price + sign * price * xPrice * Math.log10((index + 2) * 1.3))\n  // return precision(price + sign * price * xPrice * Math.pow(index + 1, 1 / 3))\n}\nconst getNextAmount = (amount, xAmount, index) => precision(amount * xAmount)\n\nexport const getSettingsColumns = () => [\n  { name: 'symbol', title: 'Symbol' },\n  { name: 'entryPrice', title: 'Entry Price' },\n  { name: 'entryAmount', title: 'Entry Amount' },\n  { name: 'pricePercent', title: 'Price Percent' },\n  {\n    name: 'price',\n    title: 'Price',\n    getCellValue: (row) => getPercentPrice(row.entryPrice, row.pricePercent),\n  },\n  { name: 'xPrice', title: 'x Price' },\n  { name: 'xAmount', title: 'x Amount' },\n  { name: 'leverage', title: 'Leverage' },\n  { name: 'aff_code', title: 'Ref' },\n  { name: 'fee', title: 'Fee' },\n  { name: 'log', title: 'Log' },\n]\n\nexport const getAvgPosition = (orders, maxIndex = orders.length - 1) =>\n  orders.reduce((acc, order, index) => {\n    if (index > maxIndex) return acc\n    const { price, amount } = _.isEmpty(acc) ? { price: 0, amount: 0 } : acc\n    return getPosition(price, amount, parseFloat(order.op), parseFloat(order.oa))\n  }, {})\n\nexport const getOrderColumns = (rows) => [\n  {\n    name: 'price',\n    title: 'Pos Price',\n    getCellValue: (row) => getAvgPosition(rows, rows.indexOf(row)).price,\n  },\n  {\n    name: 'price diff',\n    title: 'Pos Price diff',\n    getCellValue: (row) => {\n      const prevPrice = getAvgPosition(rows, rows.indexOf(row) - 1).price\n      const diff = prevPrice - getAvgPosition(rows, rows.indexOf(row)).price\n      const diffPercent = (diff / prevPrice) * 100\n      return `${precision(diff || 0)} (${precision(diffPercent || 0, 2)}%)`\n    },\n  },\n  {\n    name: 'amount',\n    title: 'Pos Amount',\n    getCellValue: (row) => getAvgPosition(rows, rows.indexOf(row)).amount,\n  },\n  {\n    name: 'pc',\n    title: 'Pos Cost',\n    getCellValue: (row) => {\n      const { price, amount } = getAvgPosition(rows, rows.indexOf(row))\n      return getCost(price, amount)\n    },\n  },\n  { name: 'op', title: 'Ord Price' },\n  {\n    name: 'opp',\n    title: 'Ord Price diff',\n    getCellValue: (row) => {\n      const { op: prevPrice } = rows[rows.indexOf(row) - 1] || {}\n      const diff = prevPrice - row.op\n      const diffPercent = (diff / prevPrice) * 100\n      return `${precision(diff || 0)} (${precision(diffPercent || 0, 2)}%)`\n    },\n  },\n  { name: 'oa', title: 'Ord Amount' },\n  { name: 'oc', title: 'Ord Cost', getCellValue: (row) => getCost(row.op, row.oa) },\n  {\n    name: 'pl',\n    title: 'P/L',\n    getCellValue: (row) => {\n      const { pl, plp } = getAvgPosition(rows, rows.indexOf(row))\n      return `${precision(pl, 3)} (${precision(plp, 2)}%)`\n    },\n  },\n]\n\nexport const getOrderRows = ({\n  entryPrice = 6046.3,\n  entryAmount = 0.001,\n  pricePercent = -10,\n  xPrice = 0.009,\n  xAmount = 1.35,\n}) => {\n  const rows = []\n\n  let price = parseFloat(entryPrice)\n  let amount = parseFloat(entryAmount)\n  const sign = Math.sign(pricePercent)\n  const endPrice = getPercentPrice(parseFloat(entryPrice), parseFloat(pricePercent))\n  while (price * sign < sign * endPrice) {\n    rows.push({ id: _.uniqueId(), op: price, oa: amount })\n    const index = rows.length - 1\n    price = getNextPrice(price, xPrice, sign, index)\n    amount = getNextAmount(amount, xAmount, index)\n  }\n  return rows\n}\n\nexport const getPlColumns = () => [\n  { name: 'price', title: 'Pos Price' },\n  { name: 'amount', title: 'Pos Amount' },\n  { name: 'exitPrice', title: 'Exit Price' },\n  {\n    name: 'pl',\n    title: 'P/L',\n    getCellValue: (row) => {\n      const pl = getPositionPL(row.price, row.exitPrice, row.amount, 0.002)\n      const plp = getPositionPLPercent(row.price, row.exitPrice, row.amount)\n      return `${precision(pl, 3)} (${precision(plp, 2)}%)`\n    },\n  },\n]\n\nexport const getPlRows = (orderRows) => {\n  const pos = getAvgPosition(orderRows)\n  return [\n    { id: 'exit1', price: pos.price, amount: pos.amount, exitPrice: getPercentPrice(pos.price, 1) },\n    { id: 'exit2', price: pos.price, amount: pos.amount, exitPrice: getPercentPrice(pos.price, 2) },\n    { id: 'exit3', price: pos.price, amount: pos.amount, exitPrice: getPercentPrice(pos.price, 3) },\n  ]\n}\n\nexport const getOrders = (settings, orderRows) =>\n  orderRows\n    .map(({ op: price, oa: amount }) => {\n      const data = {\n        type: 'LIMIT',\n        symbol: settings.symbol,\n        flags: 0,\n        price: String(price),\n        amount: String(amount),\n        meta: {\n          lev: settings.leverage ? settings.leverage : undefined,\n          aff_code: settings.aff_code,\n        }\n      }\n      return (\n        `__dispatch(` +\n        JSON.stringify({\n          type: 'WS_REQUEST_SEND',\n          meta: { isPublic: false, throttle: true },\n          payload: JSON.stringify([0, 'on', null, data]),\n        }) +\n        `)`\n      )\n    })\n    .join('\\n')\n","import React, { useState, useEffect } from 'react'\nimport { EditingState } from '@devexpress/dx-react-grid'\nimport {\n  Grid,\n  Table,\n  TableHeaderRow,\n  TableEditColumn,\n  TableInlineCellEditing,\n} from '@devexpress/dx-react-grid-material-ui'\n\nconst getRowId = row => row.id\n\nconst FocusableCell = ({ onClick, ...restProps }) => (\n  <Table.Cell {...restProps} tabIndex={0} onFocus={onClick} />\n)\n\nfunction TableEdit({ rows: initRows, columns, onChange = () => {} }) {\n  const [rows, setRows] = useState(initRows)\n  const [editingCells, setEditingCells] = useState([])\n\n  useEffect(() => {\n    setRows(initRows)\n  }, [initRows])\n\n  const commitChanges = ({ added, changed, deleted }) => {\n    let changedRows\n    if (added) {\n      const startingAddedId = rows.length > 0 ? rows[rows.length - 1].id + 1 : 0\n      changedRows = [\n        ...rows,\n        ...added.map((row, index) => ({\n          id: startingAddedId + index,\n          ...row,\n        })),\n      ]\n    }\n    if (changed) {\n      changedRows = rows.map(row => (changed[row.id] ? { ...row, ...changed[row.id] } : row))\n    }\n    if (deleted) {\n      const deletedSet = new Set(deleted)\n      changedRows = rows.filter(row => !deletedSet.has(row.id))\n    }\n    setRows(changedRows)\n    onChange(changedRows)\n  }\n\n  const addEmptyRow = () => commitChanges({ added: [{}] })\n\n  return (\n    <Grid rows={rows} columns={columns} getRowId={getRowId}>\n      <EditingState\n        onCommitChanges={commitChanges}\n        editingCells={editingCells}\n        onEditingCellsChange={setEditingCells}\n        addedRows={[]}\n        onAddedRowsChange={addEmptyRow}\n      />\n      <Table cellComponent={FocusableCell} />\n      <TableHeaderRow />\n      <TableInlineCellEditing selectTextOnEditStart />\n      <TableEditColumn showAddCommand showDeleteCommand />\n    </Grid>\n  )\n}\n\nexport default TableEdit\n","import React, { useState, useEffect } from 'react'\nimport copy from 'copy-to-clipboard'\nimport _ from 'lodash'\n\nimport {\n  getSettingsColumns,\n  getOrderColumns,\n  getOrderRows,\n  getPlColumns,\n  getPlRows,\n  getOrders,\n} from './functions'\nimport TableEdit from './TableEdit'\n\nfunction App() {\n  const [settings, setSettings] = useState({\n    id: 'settings',\n    symbol: 'tBTCF0:USTF0',\n    entryPrice: 9000,\n    entryAmount: 0.005,\n    pricePercent: -10,\n    xPrice: 0.011,\n    xPositionAmount: 0,\n    xAmount: 2,\n    leverage: 25,\n    aff_code: 'Uv2r2svs8',\n    fee: 0.075,\n    log: 1,\n  })\n  const [orderRows, setOrderRows] = useState(getOrderRows(settings))\n  const [plRows, setPlRows] = useState(getPlRows(orderRows))\n\n  useEffect(() => {\n    setOrderRows(getOrderRows(settings))\n  }, [settings])\n\n  const settingsColumns = getSettingsColumns()\n\n  const handleCopyOrders = () => {\n    const orders = getOrders(settings, orderRows)\n    console.log(orders)\n    copy(orders)\n  }\n\n  return (\n    <div>\n      <center>\n        <h3>Settings</h3>\n      </center>\n      <TableEdit\n        rows={[settings]}\n        columns={settingsColumns}\n        onChange={rows => setSettings(rows[0])}\n      />\n      <center>\n        <h3>Positions / Orders</h3>\n      </center>\n      <button onClick={() => setOrderRows([])}>Clear positions / orders</button>\n      <button\n        onClick={() => {\n          const data = JSON.parse(prompt('copy(__state().data)'))\n          if (!data) return\n          const plRows = _.filter(\n            data.positions,\n            position => position.status === 'ACTIVE',\n          ).map(({ id, basePrice, amount }) => ({ id, price: basePrice, amount, exitPirce: basePrice }))\n          setPlRows(plRows)\n          const positionRows = _.filter(\n            data.positions,\n            position => position.pair === settings.symbol && position.status === 'ACTIVE',\n          ).map(({ id, basePrice, amount }) => ({ id, op: basePrice, oa: amount }))\n          const newOrderRows = _.filter(\n            data.orders.all,\n            order =>\n              order.symbol === settings.symbol.slice(1) &&\n              order.status === 'ACTIVE' &&\n              order.type === 'LIMIT' &&\n              Math.sign(order.amount) === Math.sign(settings.entryAmount),\n          ).map(({ id, price, amount }) => ({ id, op: price, oa: amount }))\n          setOrderRows(positionRows.concat(newOrderRows))\n        }}\n      >\n        Import Data\n      </button>\n      <button onClick={handleCopyOrders}>Copy orders</button>\n      <TableEdit rows={orderRows} columns={getOrderColumns(orderRows)} onChange={setOrderRows} />\n      <center>\n        <h3>Profit / Loss</h3>\n      </center>\n      <TableEdit rows={plRows} columns={getPlColumns()} onChange={setPlRows} />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}